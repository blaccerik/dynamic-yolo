{
  "openapi": "3.0.0",
  "info": {
    "description": "dynamic yolo",
    "version": "1.0.0",
    "title": "Dynamic yolo",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "User Requests"
        ],
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created new user"
          },
          "409": {
            "description": "User has been created"
          }
        }
      }
    },
    "/projects": {
      "post": {
        "tags": [
          "Project Requests"
        ],
        "summary": "Create a new project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created new user"
          },
          "409": {
            "description": "User has been created"
          }
        }
      },
      "get": {
        "tags": [
          "Project Requests"
        ],
        "summary": "Get all projects",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/projects/{project_id}/upload": {
      "post": {
        "tags": [
          "Project Requests"
        ],
        "summary": "Upload images to project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "Project id",
            "schema": {
              "$ref": "#/components/schemas/project_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/upload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": [
          "Project Requests"
        ],
        "summary": "Get project info by id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/project_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/settings": {
      "put": {
        "tags": [
          "Project Requests"
        ],
        "summary": "Change project settings",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/project_id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_settings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project settings updated"
          },
          "400": {
            "description": "Invalid project ID or settings"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/projects/{project_id}/models": {
      "get": {
        "tags": [
          "Project Requests"
        ],
        "summary": "Get all models for a project",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/project_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models for the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "project_id": {
        "type": "integer"
      },
      "user": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "project": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          },
          "max_class_nr": {
            "type": "integer"
          }
        }
      },
      "upload": {
        "type": "object",
        "properties": {
          "uploader_name": {
            "type": "string",
            "format": "string"
          },
          "split": {
            "type": "string",
            "format": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "project_settings": {
        "type": "object",
        "properties": {
          "epochs": {
            "type": "integer",
            "description": "Number of training epochs"
          },
          "batch_size": {
            "type": "integer",
            "description": "Batch size for training"
          },
          "img_size": {
            "type": "integer",
            "description": "Image size for training"
          },
          "confidence_threshold": {
            "type": "number",
            "description": "Confidence threshold for skipping images"
          },
          "train_test_ratio": {
            "type": "number",
            "description": "Training and testing data split ratio"
          },
          "minimal_map_50_threshold": {
            "type": "number",
            "description": "Minimal map threshold"
          },
          "min_confidence_threshold": {
            "type": "number",
            "description": "Minimum confidence threshold for detection"
          },
          "min_iou_threshold": {
            "type": "number",
            "description": "Minimum intersection over union threshold for detection"
          }
        }
      },
      "model": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the model"
          },
          "parent_model_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the parent model, if any"
          },
          "added": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the model was added"
          },
          "total_epochs": {
            "type": "integer",
            "description": "Total number of epochs the model was trained for"
          },
          "epochs": {
            "type": "integer",
            "description": "Number of epochs completed"
          },
          "model": {
            "type": "string",
            "format": "binary",
            "description": "The binary representation of the model"
          },
          "model_results_id": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelResults"
            },
            "description": "List of IDs of the model's results"
          },
          "parent": {
            "$ref": "#/components/schemas/Model",
            "description": "The parent model, if any"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "description": "List of images associated with the model"
          }
        }
      }
    }
  }
}